/**
 * Copyright (c) 2020 Sebastian Zarnekow and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package org.eclipse.xtend.core.tests.performance;

import com.google.common.collect.Iterables;
import java.util.List;
import java.util.Map;
import org.eclipse.xtend.core.tests.AbstractXtendTestCase;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.util.internal.Stopwatches;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.Pair;
import org.junit.Test;

/**
 * @author Sebastian Zarnekow - Initial contribution and API
 */
@SuppressWarnings("all")
public class Github983PerformanceTest extends AbstractXtendTestCase {
  public void doCompile(final String file) {
    try {
      final Map<String, ? extends CharSequence> map = this.getDependencies();
      final List<String> files = CollectionLiterals.<String>newArrayList();
      final Function1<CharSequence, String> _function = (CharSequence it) -> {
        return it.toString();
      };
      Iterables.<String>addAll(files, IterableExtensions.map(map.values(), _function));
      files.add(file);
      final Stopwatches.StoppedTask task = Stopwatches.forTask("Github983PerformanceTest.doCompile");
      task.start();
      this.files(true, ((String[]) ((String[])Conversions.unwrapArray(files, String.class))));
      task.stop();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void compileTest1c() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package gh983;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import static gh983.Assert1.*");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.Calendar");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class Test1 {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def test() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("var actual = DFH.fDRUTSOU(5 * DH.gM(Calendar.MINUTE), 1, Calendar.MINUTE, L.D)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("13 * DH.gM(Calendar.SECOND), 10, Calendar.SECOND, L.D)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("6 * DH.gM(Calendar.HOUR_OF_DAY) + 1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("L.D)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("42 * DH.gM(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("Calendar.SECOND");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append(") + 321, 10000, Calendar.MILLISECOND, L.D)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.D)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.D)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual, \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(2000 * DH.gM(Calendar.YEAR)), 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.D), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("2 * DH.gM(Calendar.DAY_OF_YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("3 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("4 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("5 * DH.gM(Calendar.SECOND) + 6, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("L.D)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(5 *");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("DH.gM(Calendar.MINUTE), 1, Calendar.MINUTE, L.F)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("13 * DH.gM(Calendar.SECOND), 10, Calendar.SECOND, L.F)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("6 * DH.gM(Calendar.HOUR_OF_DAY) + 1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("L.F)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("42 * DH.gM(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("Calendar.SECOND");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append(") + 321, 10000, Calendar.MILLISECOND, L.F)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual, \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.F)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.F)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual, \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(2000 *");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("DH.gM(Calendar.YEAR), 1, Calendar.MILLISECOND, L.F)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("2 * DH.gM(Calendar.DAY_OF_YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("3 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("4 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("5 * DH.gM(Calendar.SECOND) + 6, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("L.F)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(5 *");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("DH.gM(Calendar.MINUTE), 1, Calendar.MINUTE, L.I)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("13 * DH.gM(Calendar.SECOND), 10, Calendar.SECOND, L.I)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("6 * DH.gM(Calendar.HOUR_OF_DAY) + 1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("L.I)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("42 * DH.gM(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("Calendar.SECOND");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append(") + 321, 10000, Calendar.MILLISECOND, L.I)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual, \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.I)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.I)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual, \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(2000 *");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("DH.gM(Calendar.YEAR), 1, Calendar.MILLISECOND, L.I)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("2 * DH.gM(Calendar.DAY_OF_YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("3 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("4 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("5 * DH.gM(Calendar.SECOND) + 6, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("L.I)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(5 *");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("DH.gM(Calendar.MINUTE), 1, Calendar.MINUTE, L.E)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"5 foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("13 * DH.gM(Calendar.SECOND), 10, Calendar.SECOND, L.E)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("6 * DH.gM(Calendar.HOUR_OF_DAY) + 1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("L.E)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("42 * DH.gM(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("Calendar.SECOND");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append(") + 321, 10000, Calendar.MILLISECOND, L.E)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual, \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.E)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.E)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual, \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(2000 *");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("DH.gM(Calendar.YEAR), 1, Calendar.MILLISECOND, L.E)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("2 * DH.gM(Calendar.DAY_OF_YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("3 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("4 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("5 * DH.gM(Calendar.SECOND) + 6, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("L.E)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(1, 0, Calendar.SECOND, L.D)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual, \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(1, -10, Calendar.SECOND, L.D)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual, \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(1, 10, 0, L.D)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\", actual, \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(1, 10, Calendar.SECOND, null)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\", actual, \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(-524944, 10, Calendar.SECOND, L.D)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(5 *");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("DH.gM(Calendar.MINUTE), 1, Calendar.MINUTE, L.D)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("13 * DH.gM(Calendar.SECOND), 10, Calendar.SECOND, L.D)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("6 * DH.gM(Calendar.HOUR_OF_DAY) + 1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("L.D)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("42 * DH.gM(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("Calendar.SECOND");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append(") + 321, 10000, Calendar.MILLISECOND, L.D)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.D)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.D)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual, \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("(2000 * DH.gM(Calendar.YEAR)), 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("L.D)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual, \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("2 * DH.gM(Calendar.DAY_OF_YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("3 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("4 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("5 * DH.gM(Calendar.SECOND) + 6, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("L.D)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(5 *");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("DH.gM(Calendar.MINUTE), 1, Calendar.MINUTE, L.F)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"5 foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("13 * DH.gM(Calendar.SECOND), 10, Calendar.SECOND, L.F)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("6 * DH.gM(Calendar.HOUR_OF_DAY) + 1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("L.F)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("42 * DH.gM(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("Calendar.SECOND");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append(") + 321, 10000, Calendar.MILLISECOND, L.F)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual, \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.F)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.F)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual, \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(2000 *");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("DH.gM(Calendar.YEAR), 1, Calendar.MILLISECOND, L.F)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("2 * DH.gM(Calendar.DAY_OF_YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("3 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("4 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("5 * DH.gM(Calendar.SECOND) + 6, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("L.F)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(5 *");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("DH.gM(Calendar.MINUTE), 1, Calendar.MINUTE, L.I)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("13 * DH.gM(Calendar.SECOND), 10, Calendar.SECOND, L.I)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("6 * DH.gM(Calendar.HOUR_OF_DAY) + 1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("L.I)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("42 * DH.gM(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("Calendar.SECOND");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append(") + 321, 10000, Calendar.MILLISECOND, L.I)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual, \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.I)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.I)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual, \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(2000 *");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("DH.gM(Calendar.YEAR), 1, Calendar.MILLISECOND, L.I)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("2 * DH.gM(Calendar.DAY_OF_YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("3 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("4 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("5 * DH.gM(Calendar.SECOND) + 6, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("L.I)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(5 *");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("DH.gM(Calendar.MINUTE), 1, Calendar.MINUTE, L.E)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"5 foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("13 * DH.gM(Calendar.SECOND), 10, Calendar.SECOND, L.E)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("6 * DH.gM(Calendar.HOUR_OF_DAY) + 1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("L.E)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("42 * DH.gM(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("Calendar.SECOND");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append(") + 321, 10000, Calendar.MILLISECOND, L.E)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual, \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.E)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.E)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual, \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(2000 *");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("DH.gM(Calendar.YEAR), 1, Calendar.MILLISECOND, L.E)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("2 * DH.gM(Calendar.DAY_OF_YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("3 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("4 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("5 * DH.gM(Calendar.SECOND) + 6, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("L.E)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(1, 0, Calendar.SECOND, L.D)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual, \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(1, -10, Calendar.SECOND, L.D)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual, \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(1, 10, 0, L.D)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\", actual, \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(1, 10, Calendar.SECOND, null)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\", actual, \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("actual = DFH.fDRUTSOU(-524944, 10, Calendar.SECOND, L.D)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    this.doCompile(_builder.toString());
  }
  
  @Test
  public void compileTest1b() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package gh983;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import static gh983.Assert1.*");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.Calendar");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class Test1 {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def test() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 1, Calendar.MINUTE, L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 10, Calendar.SECOND, L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 10000, Calendar.MILLISECOND, L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.D), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.D), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 1, Calendar.MINUTE, L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 10, Calendar.SECOND, L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 10000, Calendar.MILLISECOND, L.F), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.F), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 1, Calendar.MILLISECOND, L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 1, Calendar.MINUTE, L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 10, Calendar.SECOND, L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 10000, Calendar.MILLISECOND, L.I), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.I), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 1, Calendar.MILLISECOND, L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 1, Calendar.MINUTE, L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"5 foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 10, Calendar.SECOND, L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 10000, Calendar.MILLISECOND, L.E), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.E), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(2000 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.YEAR), 1, Calendar.MILLISECOND, L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 0, Calendar.SECOND, L.D), \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, -10, Calendar.SECOND, L.D), \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\", DFH.fDRUTSOU(1, 10, 0, L.D), \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\", DFH.fDRUTSOU(1, 10, Calendar.SECOND, null), \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(-524944, 10, Calendar.SECOND, L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(5 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.MINUTE), 1, Calendar.MINUTE, L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 10, Calendar.SECOND, L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 10000, Calendar.MILLISECOND, L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.D), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.D), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 1, Calendar.MINUTE, L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"5 foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 10, Calendar.SECOND, L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 10000, Calendar.MILLISECOND, L.F), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.F), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(2000 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.YEAR), 1, Calendar.MILLISECOND, L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(5 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.MINUTE), 1, Calendar.MINUTE, L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 10, Calendar.SECOND, L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 10000, Calendar.MILLISECOND, L.I), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.I), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 1, Calendar.MILLISECOND, L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 1, Calendar.MINUTE, L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"5 foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 10, Calendar.SECOND, L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 10000, Calendar.MILLISECOND, L.E), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.E), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 1, Calendar.MILLISECOND, L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 0, Calendar.SECOND, L.D), \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, -10, Calendar.SECOND, L.D), \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\", DFH.fDRUTSOU(1, 10, 0, L.D), \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\", DFH.fDRUTSOU(1, 10, Calendar.SECOND, null), \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(-524944, 10, Calendar.SECOND, L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    this.doCompile(_builder.toString());
  }
  
  @Test
  public void compileTest1a() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package gh983;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import static gh983.Assert1.*");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.Calendar");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class Test1 {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def test() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(5 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.MINUTE), 1, Calendar.MINUTE, L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("13 * DH.gM(Calendar.SECOND), 10, Calendar.SECOND, L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("6 * DH.gM(Calendar.HOUR_OF_DAY) + 1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("42 * DH.gM(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Calendar.SECOND");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append(") + 321, 10000, Calendar.MILLISECOND, L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.D), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(2000 * DH.gM(Calendar.YEAR)), 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.D), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("2 * DH.gM(Calendar.DAY_OF_YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("3 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("4 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("5 * DH.gM(Calendar.SECOND) + 6, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(5 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.MINUTE), 1, Calendar.MINUTE, L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("13 * DH.gM(Calendar.SECOND), 10, Calendar.SECOND, L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("6 * DH.gM(Calendar.HOUR_OF_DAY) + 1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("42 * DH.gM(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Calendar.SECOND");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append(") + 321, 10000, Calendar.MILLISECOND, L.F), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.F), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(2000 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.YEAR), 1, Calendar.MILLISECOND, L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("2 * DH.gM(Calendar.DAY_OF_YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("3 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("4 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("5 * DH.gM(Calendar.SECOND) + 6, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(5 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.MINUTE), 1, Calendar.MINUTE, L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("13 * DH.gM(Calendar.SECOND), 10, Calendar.SECOND, L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("6 * DH.gM(Calendar.HOUR_OF_DAY) + 1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("42 * DH.gM(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Calendar.SECOND");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append(") + 321, 10000, Calendar.MILLISECOND, L.I), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.I), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(2000 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.YEAR), 1, Calendar.MILLISECOND, L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("2 * DH.gM(Calendar.DAY_OF_YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("3 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("4 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("5 * DH.gM(Calendar.SECOND) + 6, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(5 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.MINUTE), 1, Calendar.MINUTE, L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"5 foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("13 * DH.gM(Calendar.SECOND), 10, Calendar.SECOND, L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("6 * DH.gM(Calendar.HOUR_OF_DAY) + 1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("42 * DH.gM(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Calendar.SECOND");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append(") + 321, 10000, Calendar.MILLISECOND, L.E), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.E), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(2000 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.YEAR), 1, Calendar.MILLISECOND, L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("2 * DH.gM(Calendar.DAY_OF_YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("3 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("4 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("5 * DH.gM(Calendar.SECOND) + 6, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 0, Calendar.SECOND, L.D), \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, -10, Calendar.SECOND, L.D), \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\", DFH.fDRUTSOU(1, 10, 0, L.D), \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\", DFH.fDRUTSOU(1, 10, Calendar.SECOND, null), \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(-524944, 10, Calendar.SECOND, L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(5 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.MINUTE), 1, Calendar.MINUTE, L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("13 * DH.gM(Calendar.SECOND), 10, Calendar.SECOND, L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("6 * DH.gM(Calendar.HOUR_OF_DAY) + 1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("42 * DH.gM(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Calendar.SECOND");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append(") + 321, 10000, Calendar.MILLISECOND, L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.D), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(2000 * DH.gM(Calendar.YEAR)), 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.D), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("2 * DH.gM(Calendar.DAY_OF_YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("3 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("4 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("5 * DH.gM(Calendar.SECOND) + 6, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(5 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.MINUTE), 1, Calendar.MINUTE, L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"5 foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("13 * DH.gM(Calendar.SECOND), 10, Calendar.SECOND, L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("6 * DH.gM(Calendar.HOUR_OF_DAY) + 1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("42 * DH.gM(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Calendar.SECOND");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append(") + 321, 10000, Calendar.MILLISECOND, L.F), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.F), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(2000 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.YEAR), 1, Calendar.MILLISECOND, L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("2 * DH.gM(Calendar.DAY_OF_YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("3 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("4 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("5 * DH.gM(Calendar.SECOND) + 6, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(5 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.MINUTE), 1, Calendar.MINUTE, L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("13 * DH.gM(Calendar.SECOND), 10, Calendar.SECOND, L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("6 * DH.gM(Calendar.HOUR_OF_DAY) + 1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("42 * DH.gM(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Calendar.SECOND");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append(") + 321, 10000, Calendar.MILLISECOND, L.I), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.I), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(2000 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.YEAR), 1, Calendar.MILLISECOND, L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("2 * DH.gM(Calendar.DAY_OF_YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("3 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("4 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("5 * DH.gM(Calendar.SECOND) + 6, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(5 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.MINUTE), 1, Calendar.MINUTE, L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"5 foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("13 * DH.gM(Calendar.SECOND), 10, Calendar.SECOND, L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("6 * DH.gM(Calendar.HOUR_OF_DAY) + 1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("42 * DH.gM(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Calendar.SECOND");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append(") + 321, 10000, Calendar.MILLISECOND, L.E), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.E), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(2000 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.YEAR), 1, Calendar.MILLISECOND, L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("2 * DH.gM(Calendar.DAY_OF_YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("3 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("4 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("5 * DH.gM(Calendar.SECOND) + 6, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 0, Calendar.SECOND, L.D), \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, -10, Calendar.SECOND, L.D), \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\", DFH.fDRUTSOU(1, 10, 0, L.D), \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\", DFH.fDRUTSOU(1, 10, Calendar.SECOND, null), \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(-524944, 10, Calendar.SECOND, L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    this.doCompile(_builder.toString());
  }
  
  @Test
  public void compileTest2() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package gh983;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import static gh983.Assert2.*");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.Calendar");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class Test2 {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def test() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(5 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.MINUTE), 1, Calendar.MINUTE, L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("13 * DH.gM(Calendar.SECOND), 10, Calendar.SECOND, L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("6 * DH.gM(Calendar.HOUR_OF_DAY) + 1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("42 * DH.gM(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Calendar.SECOND");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append(") + 321, 10000, Calendar.MILLISECOND, L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.D), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(2000 * DH.gM(Calendar.YEAR)), 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.D), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("2 * DH.gM(Calendar.DAY_OF_YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("3 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("4 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("5 * DH.gM(Calendar.SECOND) + 6, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(5 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.MINUTE), 1, Calendar.MINUTE, L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("13 * DH.gM(Calendar.SECOND), 10, Calendar.SECOND, L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("6 * DH.gM(Calendar.HOUR_OF_DAY) + 1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("42 * DH.gM(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Calendar.SECOND");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append(") + 321, 10000, Calendar.MILLISECOND, L.F), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.F), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(2000 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.YEAR), 1, Calendar.MILLISECOND, L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("2 * DH.gM(Calendar.DAY_OF_YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("3 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("4 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("5 * DH.gM(Calendar.SECOND) + 6, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(5 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.MINUTE), 1, Calendar.MINUTE, L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("13 * DH.gM(Calendar.SECOND), 10, Calendar.SECOND, L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("6 * DH.gM(Calendar.HOUR_OF_DAY) + 1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("42 * DH.gM(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Calendar.SECOND");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append(") + 321, 10000, Calendar.MILLISECOND, L.I), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.I), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(2000 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.YEAR), 1, Calendar.MILLISECOND, L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("2 * DH.gM(Calendar.DAY_OF_YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("3 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("4 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("5 * DH.gM(Calendar.SECOND) + 6, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(5 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.MINUTE), 1, Calendar.MINUTE, L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"5 foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("13 * DH.gM(Calendar.SECOND), 10, Calendar.SECOND, L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("6 * DH.gM(Calendar.HOUR_OF_DAY) + 1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("42 * DH.gM(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Calendar.SECOND");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append(") + 321, 10000, Calendar.MILLISECOND, L.E), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.E), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(2000 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.YEAR), 1, Calendar.MILLISECOND, L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("2 * DH.gM(Calendar.DAY_OF_YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("3 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("4 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("5 * DH.gM(Calendar.SECOND) + 6, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 0, Calendar.SECOND, L.D), \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, -10, Calendar.SECOND, L.D), \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\", DFH.fDRUTSOU(1, 10, 0, L.D), \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\", DFH.fDRUTSOU(1, 10, Calendar.SECOND, null), \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(-524944, 10, Calendar.SECOND, L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(5 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.MINUTE), 1, Calendar.MINUTE, L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("13 * DH.gM(Calendar.SECOND), 10, Calendar.SECOND, L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("6 * DH.gM(Calendar.HOUR_OF_DAY) + 1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("42 * DH.gM(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Calendar.SECOND");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append(") + 321, 10000, Calendar.MILLISECOND, L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.D), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(2000 * DH.gM(Calendar.YEAR)), 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.D), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("2 * DH.gM(Calendar.DAY_OF_YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("3 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("4 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("5 * DH.gM(Calendar.SECOND) + 6, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(5 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.MINUTE), 1, Calendar.MINUTE, L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"5 foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("13 * DH.gM(Calendar.SECOND), 10, Calendar.SECOND, L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("6 * DH.gM(Calendar.HOUR_OF_DAY) + 1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("42 * DH.gM(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Calendar.SECOND");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append(") + 321, 10000, Calendar.MILLISECOND, L.F), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.F), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(2000 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.YEAR), 1, Calendar.MILLISECOND, L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("2 * DH.gM(Calendar.DAY_OF_YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("3 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("4 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("5 * DH.gM(Calendar.SECOND) + 6, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.F),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(5 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.MINUTE), 1, Calendar.MINUTE, L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("13 * DH.gM(Calendar.SECOND), 10, Calendar.SECOND, L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("6 * DH.gM(Calendar.HOUR_OF_DAY) + 1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("42 * DH.gM(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Calendar.SECOND");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append(") + 321, 10000, Calendar.MILLISECOND, L.I), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.I), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(2000 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.YEAR), 1, Calendar.MILLISECOND, L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("2 * DH.gM(Calendar.DAY_OF_YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("3 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("4 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("5 * DH.gM(Calendar.SECOND) + 6, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.I),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(5 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.MINUTE), 1, Calendar.MINUTE, L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"5 foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("13 * DH.gM(Calendar.SECOND), 10, Calendar.SECOND, L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("6 * DH.gM(Calendar.HOUR_OF_DAY) + 1, 2, Calendar.HOUR_OF_DAY,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("42 * DH.gM(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Calendar.SECOND");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append(") + 321, 10000, Calendar.MILLISECOND, L.E), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 7, Calendar.DAY_OF_YEAR, L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(0, 1, Calendar.YEAR, L.E), \"foo\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(2000 *");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DH.gM(Calendar.YEAR), 1, Calendar.MILLISECOND, L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("1 * DH.gM(Calendar.YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("2 * DH.gM(Calendar.DAY_OF_YEAR) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("3 * DH.gM(Calendar.HOUR_OF_DAY) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("4 * DH.gM(Calendar.MINUTE) +");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("5 * DH.gM(Calendar.SECOND) + 6, 1, Calendar.MILLISECOND,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("L.E),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, 0, Calendar.SECOND, L.D), \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(1, -10, Calendar.SECOND, L.D), \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\", DFH.fDRUTSOU(1, 10, 0, L.D), \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\", DFH.fDRUTSOU(1, 10, Calendar.SECOND, null), \"\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(\"foo\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DFH.fDRUTSOU(-524944, 10, Calendar.SECOND, L.D),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"foo\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    this.doCompile(_builder.toString());
  }
  
  public Map<String, ? extends CharSequence> getDependencies() {
    return CollectionLiterals.<String, String>newHashMap(this.assert1(), this.assert2(), this.dfh(), this.dh(), this.l());
  }
  
  public Pair<String, String> assert1() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package gh983;");
    _builder.newLine();
    _builder.append("class Assert1 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected new() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def static void assertEquals(Object expected, Object actual) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def static void assertEquals(String message, double expected, double actual, double delta) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def static void assertEquals(String message, float expected, float actual, float delta) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def static void assertEquals(long expected, long actual) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(null, expected, actual)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def static void assertEquals(String message, long expected, long actual) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def static void assertEquals(double expected, double actual) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def static void assertEquals(String message, double expected, double actual) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def static void assertEquals(double expected, double actual, double delta) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(null, expected, actual, delta)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def static void assertEquals(float expected, float actual, float delta) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assertEquals(null, expected, actual, delta)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def static void assertEquals(String message, Object[] expecteds, Object[] actuals) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def static void assertEquals(String message, Object expected, Object actual) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def static void assertEquals(Object[] expecteds, Object[] actuals) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return Pair.<String, String>of("gh983/Assert1.xtend", _builder.toString());
  }
  
  public Pair<String, String> assert2() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package gh983;");
    _builder.newLine();
    _builder.append("class Assert2 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def static void assertEquals(String message, Object expected, Object actual) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return Pair.<String, String>of("gh983/Assert2.xtend", _builder.toString());
  }
  
  public Pair<String, String> dfh() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package gh983;");
    _builder.newLine();
    _builder.append("class DFH {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static String fDRUTSOU(long a, long b, int c, L d) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static long roundtimeToSizeOfUnit(long time, long size, int unit) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return 0l;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return Pair.<String, String>of("gh983/DFH.xtend", _builder.toString());
  }
  
  public Pair<String, String> dh() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package gh983;");
    _builder.newLine();
    _builder.append("class DH {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static long gM(int unit) { return 0l; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return Pair.<String, String>of("gh983/DH.xtend", _builder.toString());
  }
  
  public Pair<String, String> l() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package gh983;");
    _builder.newLine();
    _builder.append("enum L {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("D, F, I, E");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return Pair.<String, String>of("gh983/L.xtend", _builder.toString());
  }
}
